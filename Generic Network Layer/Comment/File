
* Network Manger'ı yazmaya başladık *

- https://jsonplaceholder.typicode.com -> Bu bizim base URL'miz
- /users -> Bu da bizim path'miz yani endPointimiz, büyük projelerde çok fazla bulunur
- Endpoint'lerimi handle atmek için bir Enpoint adında bir file oluşturuyoruz.

- Benim baseURL'den data çekmek için bir methoda ihtiyacım var (get,post,patch,delete...)
- HTTP Metodları bunlar.



* Endpoint Dosyasını oluşturyoruz *

- İçeride bize lazım olan tüm yapıları oluşturuyouruz
- 1 HTTPMethod (Get, Post, Delete, Patch)
- 2 EndPoint (BaseURL, path, HTTPMethod, Headers, request())
- 3 NetworkError

- Request fonksiyonumuzu oluşturuyoruz bu bize bir URLRequest döndürücek.
- İçersinde component bileşenlerimizi veriyoruz(baseURL, HTTPMethod, Header, path)



* Network Menager'imizi yazmaya başlayabiliriz *

- NetworkManager için bir adet Protocolde oluşturuoyuz ve Classımız bu Protocılü conform edecek.
-Şimdi ilk olarak NetworkManagerProtocol içersinde bulunan request adlı fonksiynu generic hale getirelim özelleşterelim
- T type olmalı ve Codable'ye conform edecek
- Neden T ve Codable'ye conform etmesini istiyoruz; biz T type a herhangi bir istediğimiz nesne tipini yollayabiliriz (user, animal ...)
- Bizden parametre olarak bir  endPoint bekleyecek ve bu endPoint EndPoint enumuza bu fonksiyon
- completion bloğunun işlevine gelecek olursak, burada bir ağ isteği olucak
// buraya devam edicem

??? @ESCAPİNG
Bir closure, fonksiyon tamamlandıktan sonra çağrılacaksa, yani fonksiyon çalışmayı bitirdikten sonra bile closure hayatta kalacaksa, closure'ı @escaping ile işaretlemen gerekir. Bu, genellikle asenkron işlemlerde (örneğin, ağ istekleri veya veri tabanı işlemleri gibi uzun süren işlemlerde) kullanılır.

??? Singleton Network Manager
- NetworkManager'ımın instancesini oluşturuyorum singleton şekilde oluşturuyorum neden? !!!!!!!
- Bu yapı, tek bir global erişilebilir NetworkManager örneği oluşturmanı sağlar. Bu sayede
- Tek bir network yöneticisi: Ağ isteklerini yöneten bir sınıf genellikle uygulama boyunca tekrar kullanılmak istenir. NetworkManager'ın sadece bir kez oluşturulup, aynı örneği kullanarak tüm ağ isteklerini yönetmek isteyebilirsin. Her çağırışında yeni bir nesne oluşturmak yerine, tek bir nesneyle tüm ağ işlemlerini yönetebilirsin.
- Bellek yönetimi: Her seferinde yeni bir NetworkManager nesnesi oluşturmak yerine tek bir nesne kullanmak, gereksiz bellek kullanımını önler.
- Merkezi yapı: Singleton yapısı sayesinde NetworkManager'ın merkezi bir yapıda olmasını sağlarsın. Böylece ağ isteği yapılan her yerde aynı NetworkManager kullanılır, farklı örnekler arasında tutarsızlık oluşmaz.
- Global erişim: Uygulamanın farklı yerlerinden NetworkManager'a kolayca erişebilirsin. NetworkManager.shared ile her zaman aynı nesneye ulaşmak mümkündür.
---Özetle---
Bu yapı, tek bir global erişilebilir NetworkManager örneği oluşturmanı sağlar. Bu sayede:
Uygulamanın herhangi bir yerinde aynı NetworkManager nesnesini kullanırsın.
Bellek ve performans açısından avantaj sağlarsın.
Merkezi bir yapı ile network işlemlerini daha kolay yönetirsin.

- Yazmaya devam ediyouz
- Burada let session = URLSession.shared şeklinde bir yapı oluşturudk sebebini anlamadım.
- URLSession.shared.dataTask(with:) işlemi, bir URL'den veri almak veya sunucuya veri göndermek için kullanılan asenkron bir yöntemdir. Bu yöntem, ağ işlemlerini (HTTP istekleri) gerçekleştirmek için yaygın olarak kullanılır ve uygulamanın ana thread'ini (UI thread) bloke etmeden ağ üzerinden veri alıp göndermenize olanak tanır.
- Burada bize bu completion bloğundan dönen data, response, error değerlerinin tamamı nil biz bunları unwrap edeceğiz.
- Burada ilk olarak error ile başlıyoruz burada önemli bir noktaya değeneceğiz CurtomNetwork Errorlarımızı oluşturuyoruz
- Onun dışunda responseCode'larımızın controlünü sağlıyoruz
- status code kontrol içersinde 200 ile 299 arasında bize bir result dönücek ve biz bunu completionda succes durumda döneceğiz.
- Bu bize ara katmandan döncecek direkt olarak requeste VC veya VM üzerinden değil. oluşturduğumuz ara katman üzerinden dönecek ben bunu UserService olarak adlandırıyorum.


* UserService Katmanı *
- Burada direkt olarak bizim user'ımızı çekmemizi sağlayan getUser() fonksiyonumuzu yazıyorum
- Burada artık T type değil json'ımıza uygun olacak şekilde bir User model array'i veriyoruz.
- Ve bu fonksiyon aracılığyla aldığımız endPoint ve complation değerlerini NetworkManager katmanımzda bulunan request' e gönderiyoruz


* Proje Başlatma Adımları *

- Scene Delegate -
- Uygulamnın kullanıcı arayüzünü yönetmekle sorumludur. uygulama başladığında, bir window oluşturur. ve bu pencerenin kök görünüm denetleyicisini (rootViewController) oluşturur.
- Neden önemli? Uygulamanın arayüzünün başlatılmasından ve yaşam döngüsünden sorumlu olduğu için burada kontrol merkezi olarak çalışır. AppRouter'ı kullanarak uygulamanın başlangıç ekranını belirler.


- App Router -
- İşlevi: AppRouter, uygulamanın başlangıç akışını belirlemek için kullanılır. Burada, UserListViewController'ı oluşturur ve bir UINavigationController'ın içine yerleştirir. Bu, uygulamanın ilk görünüm denetleyicisi olur.
- Neden önemli? Router, uygulamanın navigasyon akışını düzenler. Birden fazla ekran arasında geçiş yapmayı kolaylaştırır. Ayrıca, router kullanarak uygulamanın farklı bölümlerini bağımsız olarak yönetmek daha kolaydır.

- AppContainer -
- İşlevi: AppContainer, tüm uygulama genelinde kullanılacak servisler ve router gibi temel bileşenleri barındıran bir "container" (kapsayıcı) yapıdır.
- Neden önemli? Tüm bağımlılıkları (dependency) merkezi bir yerden yönetmeye olanak sağlar. Örneğin, bir servis sınıfı (network servisleri gibi) tek bir yerden kolayca erişilebilir hale gelir.
- Artısı: Uygulama genelinde aynı servis veya router'ı tekrar tekrar oluşturmadan, tek bir yerden erişim sağlayabilirsin. Kod tekrarını önler.


- User Builder -
- İşlevi: UserListBuilder, UserListViewController'ı oluşturur ve içine gerekli olan ViewModeli ekler. Burada, ViewModel servisi kullanarak verileri yönetir.
- Neden önemli? Builder deseni, nesneleri oluştururken bağımlılıkları doğrudan atayarak, bağımlılıkların merkezileşmesine olanak sağlar. Böylece UserListViewController'ın ihtiyaç duyduğu ViewModel ve diğer bileşenler oluşturulur.
- Artısı: Nesne oluşturma işlemleri tek bir yerde yapılır. Eğer kontrolcülerin nasıl oluşturulduğu değiştirilirse, sadece builder'ı güncelleyerek değişiklik yapabilirsin.



* Movie Presentation *

- Presentation yapısı, uygulamalarda veriyi kullanıcıya sunulacak şekilde hazırlayan bir katmandır. Özellikle ViewModel ile View arasındaki iletişimde kullanılır. İşlevlerini şu şekilde sıralayabiliriz

- UI Bağımsızlık Sağlamak:
Presentation katmanı, model verisinin kullanıcı arayüzüne uygun hale getirilmiş temsilidir. Bu sayede model yapısındaki değişiklikler, kullanıcı arayüzünü etkilemez, sadece presentation yapısı güncellenir.

- Test Edilebilirliği Artırmak:
Presentation yapıları, arayüz kodlarından bağımsız oldukları için daha kolay test edilebilir. UI elementleriyle etkileşime girmeden veri manipülasyonunu test edebilirsin.

- Kapsülleme:
Modelin detaylarını gizleyip, sadece gerekli bilgileri View katmanına sunar. Bu, MVC veya MVVM yapılarında katmanlar arası geçişin daha temiz olmasını sağlar.


* CollectionView'mizi oluşturuyoruz *

- İlk olarak bir ext CGFloat için bir extension yazıyoruz.Bu CGFloat extension'ı, ekranın genişliği (dWidth) ve yüksekliği (dHeight) gibi özellikleri daha kolay ve hızlı bir şekilde kullanmana olanak tanır. Kodun içinde her seferinde UIScreen.main.bounds.width ve UIScreen.main.bounds.height yazmak yerine, bu extension sayesinde daha okunabilir ve daha kısa bir kod yazabilirsin.

- CollectionViewHelper oluşturuyoruz, Bu kod, CollectionViewHelper adında bir enum içerisinde, CreateUserListFlowLayout isimli bir statik fonksiyon tanımlıyor. Bu fonksiyon, UICollectionViewFlowLayout nesnesi oluşturup, koleksiyon görünümünde kullanılacak düzen (layout) yapılandırması yapmayı amaçlıyor.

- Şimdi UserListViewController içersinde collectionView'mizi oluşturuyoruz gereken helper ve ext oluşururarak devam ediyoruz.

- UIView için bir ext oluşturuyoruz pinToEdgesOf adında
Bu kod, bir UIView uzantısı (extension) ekleyerek, bir görünümün (UIView'un) kenarlarını başka bir görünüme yapıştırmak (pinlemek) için kolaylaştırılmış bir yöntem oluşturur. Bu uzantı, otomatik düzen (auto layout) kullanarak bir alt görünümün (subview) üst, alt, sol ve sağ kenarlarını üst görünümün (superview) kenarlarına sabitlemeyi sağlar.


* CustomCell oluşturuyoruz *

- İlk olarak burada hep kulllanılan fakat işlevi pek bilinmeyen bir kod bloğunu açıklayacağız ->

    1. override init(frame: CGRect)
Amaç: Bu, hücrenin başlatılması (initialize) sırasında çalışan bir fonksiyondur. Bu initializer, UICollectionViewCell'in varsayılan başlatıcısını geçersiz kılar ve hücre oluşturulduğunda çağrılır.
frame: Hücrenin boyutlarını belirten CGRect tipi bir değişken. Bu değişken, hücrenin Collection View'de nasıl yerleşeceğini ve ne kadar yer kaplayacağını tanımlar.
super.init(frame: frame): Burada UICollectionViewCell'in kendi init fonksiyonunu çağırarak, hücrenin düzgün bir şekilde başlatılmasını sağlıyorsun.

    2. required init?(coder: NSCoder)
Amaç: Bu, Interface Builder (storyboard veya nib dosyaları) ile hücre oluşturulursa çağrılan bir başlatıcıdır.
fatalError("init(coder:) has not been implemented"): Eğer bu hücre Interface Builder üzerinden oluşturulursa, bu fonksiyon çalışacak. Ama şu an sadece kodla hücre oluşturduğun için, burada fatalError ile uygulamanın çökmesine neden oluyorsun. Bu şekilde, Interface Builder kullanılmadığında hata vereceğini belirtmiş oluyorsun.
Neden kullanılır: Eğer hücre sadece programatik olarak kullanılacaksa, storyboard kullanmadığını göstermek için bu init'i implement edip fatalError fırlatabilirsin.

Bu kod, bir UICollectionViewCell olan UserListCell'i tanımlıyor. Bu hücre, kullanıcı bilgilerini göstermek için tasarlandı. İşte basit bir açıklama:

Properties: Hücrede bir nameLabel (kullanıcı ismi) ve bir phoneLabel (telefon numarası) var. Bu etiketler, kullanıcı bilgilerini göstermek için kullanılıyor.
İnitializer: Hücre ilk oluşturulduğunda, configureCell fonksiyonu çağrılarak hücre yapılandırılıyor. Bu fonksiyon, arka plan rengini ayarlayıp etiketleri ekliyor.
setUser Methodu: Bu metod, dışarıdan bir UserPresentation nesnesi alıyor. Kullanıcının adı nameLabel'a, telefon numarası phoneLabel'a yerleştiriliyor ve hücreye köşe yuvarlaması (cornerRadius) ekleniyor.
Auto Layout: Etiketler, hücrede ortalanmış durumda ve aralarındaki boşluk ayarlanmış.
Bu sayede her hücre, kullanıcının adını ve telefon numarasını gösteriyor, ayrıca hücrelerin köşeleri yuvarlanıyor.


* DetailUserView oluşturuyoruz *

- İlk olarak sayfa geçiş işlemini nasıl yaptığımıza bakacağız.
1. UserListViewController içersinde bulunan didSelectItemAt fonksiyonu yardımı ile birlikte kullanıcının seçmiş olduğu indeksi alıyoruz.
2. Kullanıcının tıklamış olduğu indeki  viewModel içersinde oluşturduğumuz selectedUser fonksiyonuna UserListViewModelProtocol yardımı ile iletiyoruz.
3. Seçilen index' içersinde bulunan user'ı alıyoruz viewModel içersinde oluşturduğumuz User tipinde ki array yardımı ile.
4. DetailView modeli oluşturuyoruz viewModel içersinde bulunan selectedUser içersinde ve init olurken istenen User'a oluşturduğumuz User objesini veriyoruz 
5. Delegate yardımıyla ViewController içersinde bulunana navigate fonksiyonuna ulaşıyoruz ve bir üst satırda oluşturduğumuz DetailViewModel'i UserListViewRoute enumu ile navigate fonksiyonuna iletiyoruz.
6. Burada viewController'da bulunan navigate fonksiyonuda UserListViewRoute tipinde bir parametre istiyor zaten bizden.
7. Burada switch case ile gelen viewModel'imizi (DetailViewModeli) UserDetailBuilder.make fonksiyonuna iletiyoruz oda bize bir viewController dönüyor buda bizim DetailViewControllerımız
8. show(viewController, sender: nil) ile sayfamızı kullanıcıya seçtiği user'a göre gösteriyoruz.

- DetailViewController UI ve Data işlemleri
1. İlk olarak bildiğimiz üzere biz viewModel'imizi init ettik burada init ettiğimiz anda bizim detailView için oluşturduğumuz UserDetailPresentation yardımıyla gelen User model tipinde ki seçilen user'ı UserDetailPresentation tipine dönüştürüyoruz ve DetailViewModel içersinde oluşturduğumuz presentation objemizin içersine atıyoruz.
2. DetailViewController içersinde viewDidLoad() çalıştığı anda UserDetailViewModelProtocol yardımı ile viewModel içersinde oluşturduğumuz laod() fonksiyonunu çalıştırıyoruz.
3. ViewModel içersinde bulunan load func'muz çalıştığı anda ise bizim UserDetailPresentation tipinde ki presentation nesnemizi guard let ile kontrol ederek delegate yardımı ile viewController'ımız içersinde bulunan showDetail fonksiyonumuz içersine parametre olarak veriyoruz.
4. Ve presentation yardımıyla adlığımız değerleri configureLabel fonksiyonunda NSMutableAttributedString kullanarak ekranımızda gösteriyoruz.


* Unit Test *

* Load Test *
- Testimizi target'a ekledik
1. @testable import Generic_Network_Layer yazarak, bu modülün internal (içsel) yapıları ve işlevlerine test dosyasından erişebilirsin, böylece normalde gizli olan işlevleri test etme olanağına sahip olursun.
2. İlk olarak her test case'de bize lazım olacak viewModel'imizi ekliyoruz testimize.
3. Bu viewModel'i oluşturmak için bir servise ihtiyacımız var.
4 Mock olarak bu servisi oluşturuyoruz, bu mock servis network'e gitmeyecek içersine biz oluşturduğumuz user'ları koyacağız o dönecek
5. Şimdi testExample içersinde test yazmaya başlıyouruz fakat bizim neye ihtiyacımız var
6. Burada biz viewModel'e çağrılar yapacağız ve bize bir output dönmesini bekleyeceğiz, dolayısıyla mock bir view yazmamız gerekecek.
7. MockUserView adında bir mock view oluşturuyoruz ve bu mockView UserListViewModelDelegate'e conform edecek.
8. Şimdi nasıl mocklayacağımızı düşünelim, ilk olarak bize output'lar birden fazla gelecekler biz bunları UserListViewModelOutput tipinde bir arrayde tutabiliriz
9. bunun için mockView içersinde bir UserListViewModelOutput tipinde bir outputs array'i oluşturduk handleViewModelOutput func'dan dönen outpuları burada tutacağız.
10. Sonrasında da gelen outputlara test func'muz içersinde tek tek bakarız.
11. view'mizide class içersinde oluşturuyoruz ve viewModel'in delegate'inide oluşturduğumuz MockView olarak atıyoruz.
12. Şimdi test func'unu içersinde yazmaya başlıyoruz burada: Given, When, Then yapısını yazıyoruz.

13. When -> Burada kullanmak üzere iki adet yapımız var ilk olarak bir json oluşturuyoruz,
bu json bizim test edeceğimiz json olacak sonrasında da bu json'ı decode etmesi için bir ResourceLoader oluşturuyoruz. bir JSON dosyasını yükleyip decode ederek User modeline dönüştüren bir sınıf olan ResourceLoader'ı tanımlar.
14. Sonrasında When kısımında mockService de oluşturduğumuz user içersine resource loader'dan dönen user'mızı veriyoruz, bu şekilde bize service user'ı dönecek.

15. When -> Kendimizi view'in yerine koyalım view laod ettiğinde viewModel.load() fonksiyonunu çağırıcak o yüzden viewModel'de bulunana loadUserList fonksiyonunu çağrıyoruz.

16. Then -> Burada view load ettiğinde ne bekliyoruz buna bakacağız,
ilk olarak view'de bulunan outpustlarımızı kontrol edeceğiz.
17. İlk outputumuz .updatetitle burada onu test ettik. Burada önemli olan nokta burada biz bir view özelliğini test ediyoruz bu doğru mu ilk olarak bunda dikkat etmemiz gerekiyor istersek direkt olarak ilk utputun ne olduğunu test edebiliriz veya direkt string değerini test ederiz daha doğru olan ilk seçeneğimiz kodda her iksi de gösterildi.

18. Bir diğer loadTest içeriğimiz ise .showUser outputs'umuz olacak burada ise yapmamız gereken bizim ResourceLoader ile oluşturduğumuz movie'yi ilk olarak UserPresentation ile değiştirerek view outputunda doğru olarak aktarılıp aktarılmadığını test ettik
19. Bu şekilde Loadte st'imizi tamamladık.



* Navigate Test *

1. Given -> İlk olarak bizim view'imizde movie'lerin listelenmesi gerek bunun için

2. When -> Given kısmında ekranımza oluşturduğumuz user'ları ekledik şimdi ise yapmamız gereken ben 0. index'e tıkladığımda ne olacak bunu test edeceğiz.
3. Ben burada viewModel'deki selectedUser ile 0. index'e tıkladım.
4. MockUserView içersinde navigate fonksiyonumuz var burada biz sadece bu fonksiyonun çağrılıp çağrılmadığını test edeceğiz bu sebeple basit bir bool değer tutsak yeterli olur
